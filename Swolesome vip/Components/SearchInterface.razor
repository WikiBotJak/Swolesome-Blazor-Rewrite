@inject ApiService apiService
@inject SearchConfigService ConfigService
@using Swolesome_vip.Services

<div class="d-flex justify-content-between">
    <h4 class="text-lg font-semibold mb-2">Search</h4>
    <button class="btn btn-outline-primary">Config</button>
</div>

<div class="mb-3">
    <label class="fw-semibold d-block">
        Input (one per line)
        <span class="ms-2 text-primary small cursor-pointer">
            ðŸ“‚ Import
        </span>
    </label>
    <textarea @bind="SearchInput"  rows="5" class="form-control"></textarea>
    <input type="file" class="d-none"/>
</div>

<div class="mb-3">
    <div class="d-flex align-items-center gap-4 mt-2">
        <label class="d-inline-flex align-items-center">
            <input type="checkbox" @bind="WildcardEnabled" class="mr-2"/>Wildcard
        </label>
        <label class="d-inline-flex align-items-center">
            <input type="checkbox" @bind="CaseSensitiveEnabled" class="mr-2"/>Case Sensitive
        </label>
    </div>
</div>

<div class="mb-3">
    <label class="form-label fw-medium mb-2">Input Types (select at least one)</label>
    <div class="d-flex gap-2 flex-wrap">
        @foreach (var type in ConfigService.Config.InputTypes)
        {
            <input type="checkbox" class="btn-check" id="btn-check-@type" autocomplete="off" 
                   checked="@(SelectedInputTypes.Contains(type))"
                   @onchange="() => ToggleInputType(type)">
            <label class="btn btn-secondary btn-sm" for="btn-check-@type">@type</label>
        }
    </div>
</div>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="StartSearch">ðŸ”Ž Start Search</button>
</div>

@code {
    private List<string> SelectedInputTypes { get; set; } = new();
    private string SearchInput { get; set; } = String.Empty;
    private bool WildcardEnabled { get; set; }
    private bool CaseSensitiveEnabled { get; set; }
    private string results { get; set; } = string.Empty;

    private async Task StartSearch()
    {
        if(string.IsNullOrWhiteSpace(SearchInput)) return;

        results = await apiService.SendRequestAsync(SearchInput, SelectedInputTypes, WildcardEnabled, CaseSensitiveEnabled);
        
        Console.WriteLine(results);
    }

    private void ToggleInputType(string type)
    {
        if (SelectedInputTypes.Contains(type))
        {
            SelectedInputTypes.Remove(type);
        }
        else
        {
            SelectedInputTypes.Add(type);
        }
    }
}