@inject ApiService apiService
@inject SearchConfigService ConfigService
@using System.Text.Json
@using Swolesome_vip.Models
@using Swolesome_vip.Services

<div class="d-flex justify-content-between">
    <h4 class="text-lg font-semibold mb-2">Search</h4>
    <button class="btn btn-info"><i class="fa fa-gear"></i> Config</button>
</div>

<div class="mb-3">
    <label class="fw-semibold d-block mb-2">
        Input (one per line)
        <button type="button" class="btn btn-sm btn-outline-primary ms-2"
                @onclick="TriggerFileImport">
            <i class="fa-solid fa-file-import me-1"></i> Import
        </button>
    </label>
    <textarea @bind="SearchInput" rows="5" class="form-control"></textarea>
    <input type="file" class="d-none"/>
</div>

<div class="mb-3">
    <div class="d-flex align-items-center gap-4 mt-2">
        <label class="d-inline-flex align-items-center">
            <input type="checkbox" @bind="WildcardEnabled" class="mr-2"/>Wildcard
        </label>
        <label class="d-inline-flex align-items-center">
            <input type="checkbox" @bind="CaseSensitiveEnabled" class="mr-2"/>Case Sensitive
        </label>
    </div>
</div>

<div class="mb-3">
    <label class="form-label fw-medium mb-2">Input Types (select at least one)</label>
    <div class="d-flex gap-2 flex-wrap">
        @foreach (var type in ConfigService.Config.InputTypes)
        {
            <input type="checkbox" class="btn-check" id="btn-check-@type" autocomplete="off" 
                   checked="@(SelectedInputTypes.Contains(type))"
                   @onchange="() => ToggleInputType(type)">
            <label class="btn btn-secondary btn-sm" for="btn-check-@type">@type</label>
        }
    </div>
</div>

<div class="mb-3">
    @if (isSearching)
    {
        <button class="btn btn-primary" disabled><i class="fa-solid fa-spinner fa-spin"></i> Searching...</button>   
    }
    else
    {
        <button class="btn btn-primary" @onclick="StartSearch"><i class="fa-solid fa-magnifying-glass"></i> Start Search</button>   
    }
</div>

@code {
    [Parameter] public EventCallback<List<SearchResult>> OnSearchCompleted { get; set; }
    private List<string> SelectedInputTypes { get; set; } = new();
    private string SearchInput { get; set; } = String.Empty;
    private bool WildcardEnabled { get; set; }
    private bool CaseSensitiveEnabled { get; set; }
    private List<SearchResult> results { get; set; } = new List<SearchResult>();

    private bool isSearching = false;

    private async Task StartSearch()
    {
        results.Clear();
        if (string.IsNullOrWhiteSpace(SearchInput) || isSearching) return;
        isSearching = true;
        StateHasChanged();

        var searchInputList = SearchInput.Split("\n");

        foreach (var input in searchInputList)
        {
            var response = await apiService.SendRequestAsync(input, SelectedInputTypes, WildcardEnabled, CaseSensitiveEnabled);
            results.Add(new SearchResult
            {
                jsonData = response,
                Term = input,
                SelectedFields = SelectedInputTypes
            });
        }

        await OnSearchCompleted.InvokeAsync(results);
        isSearching = false;
    }

    private void TriggerFileImport()
    {
        
    }

    private void ToggleInputType(string type)
    {
        if (SelectedInputTypes.Contains(type))
        {
            SelectedInputTypes.Remove(type);
        }
        else
        {
            SelectedInputTypes.Add(type);
        }
    }
}