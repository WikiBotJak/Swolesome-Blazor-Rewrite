@page "/"
@using Swolesome_vip.Models

@* 
  This is the main page of the Blazor app. 

  - It displays a search interface at the top using the `SearchInterface` component.
  - When a search is completed, the results are passed to this page via `HandleSearchCompleted`.
  - We then display the results using the `ResultsTable` component.
  
  Note: This page uses conditional rendering (`if` statements) and loops (`foreach`) to dynamically show results.
*@

<section class="bg-white rounded shadow p-4 mb-4">
    <SearchInterface OnSearchCompleted="HandleSearchCompleted" />
</section>

@if (Results is not null && Results.Count > 0)
{
    <hr />
    @foreach (var result in Results)
    {
        <section class="bg-white rounded shadow p-4 mb-4">
            <div class="d-flex justify-content-between mb-2">
                <div class="d-flex align-items-center">
                    <h5 class="fw-bold text-black-50">Results for <span class="text-primary">@String.Join(", ", result.SelectedFields): @result.Term</span></h5>
                </div>
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary me-2">
                        Copy as text
                    </button>
                    <button class="btn btn-sm btn-outline-secondary me-2">
                        Copy as CSV
                    </button>
                    <button class="btn btn-sm btn-outline-secondary">
                        Copy as JSON
                    </button>
                </div>
            </div>
            @if (result.jsonData.RootElement.TryGetProperty("error", out var error))
            {
                <p class="text-danger fw-bold">Error: @error.GetString()</p>
            }
            else
            {
                <ResultsTable Rows="@(result.jsonData.RootElement.GetProperty("results").EnumerateArray())"/>
            }
        </section>
    }
}

@* @code is a C# syntax that allows us to use C# code in a Razor file.
    In this case, we use it to define a method that will be called when the search is completed.
    We also use it to define a property that will hold the results of the search.
*@
@code {
    [Parameter] public List<SearchResult> Results { get; set; } = new List<SearchResult>();

    private void HandleSearchCompleted(List<SearchResult> ctx)
    {
        Results = ctx;
    }
}